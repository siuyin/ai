# Notes on Artificial Intelligence

Loh Siu Yin
Developer, Beyond Broadcast LLP
siuyin@beyondbroadcast.com
19 Apr 2020

These notes are based on "CS50: Introduction to AI with Python by Harvard University".
That course was fist published on EdX on 1 April 2020.

While the course language was `python`, I have re-implemented key concepts with `Go`.
I did this to reinforce my understanding of the course content.


## Search

Given a problem with a defined starting point,  
find a series of actions
that will lead to a, preferably optimal, solution.

Let S be the state of the world, and  
A be the set of actions when applied to the world  
results in a new state S'.

The transition from S to S' can then be modelled as a function:  
T(S,A) -> S'.

A is a function of the current state, S.
Thus A should be written: A(S).

In order to determine if a solution has been found,  
we define the goal state, G.  
If S = G, then the state of the world is at _a_ goal state
(there may be many states S that satisfy goal state G).  

The path from S to G can be tracked,
if each S maintains a pointer to its parent state Sprev.

### Go Implementation with Breadth-First Search

Let us invoke the search thus:

.code search/search_test.go /invS/,/invE/ HL01

`transitionModel` and `availableActions` are defined in the code
calling `Search`.
I will expand on their implementation later.

`Search` searches breadth-first:

.code search/search.go  /schS/,/schE/ HL01

`breadthFirstSearch.search` is listed below.
This implementation was guided by [pseudocode](https://en.wikipedia.org/wiki/Breadth-first_search#Pseudocode)
given in wikipedia.

.code search/search.go /bfsS/,/bfsE/

#### Transition Model and Available Actions

The transition model T, returns the next state S', when action A acts on current state S.  
i.e. T(S,A) -> S'

.code search/search_test.go /tmS/,/tmE/

`availableActions` implements A(S) and returns a list of actions:

.code search/search_test.go /aaS/,/aaE/

#### Example run

Example code:

.code search/search_test.go /invS/,/invE/ HL01

Each `State` is printed out thus:

.code search/search.go /strS/,/strE/

Test run:

```
siuyin@godev:~/go/github.com/siuyin/ai/search$ go test
--- FAIL: ExampleSearch (0.00s)
got:
[(4: <--) (5: <--) (6: <--) (7: <--) (8: <--) (9: <--) (10: <--) (11: <--) (12: )]
want:
Should fail to demonstrate output
FAIL
```

### Go Implementation with Depth-First Search

Depth first search essentially uses the same algorithm as breadth first search.
However a stack is used instead of a queue.

.code search/search.go /dfsS/,/dfsE/

The differences with breadth first search are highlighted in the code below:

.code search/search.go /dfmS/,/dfmE/


### Other search algorithms

These include:
1. A-star,  a heuristic enhanced search.
1. Iterative deepening depth-first search (only for directed graphs).


## Representing Knowledge

Representing knowledge is useful in building knowledge bases and expert systems.

The main ways to represent knowledge are with:
1. Propositional logic
1. First-order logic

### Propositional logic

Knowledge is represented with statements like:

1. It is raining. (S1)
1. It is sunny. (S2)
1. S1 and S2 -> It is both raining and sunny.
1. S1 or S2 -> It is either raining or sunny.
1. **Â¬**S1 -> It is not raining. Also !S1 or not S1.
1. There are clouds. (S3)
1. S1 **->** S3. Reads S1 implies S3. **If** it is raining, **then** there are clouds.
1. Water droplets are falling from the sky. (S4)
1. S1 **<->** S4. Reads it is raining **if and only if** water droplets
  are falling from the sky.
  Conversely water droplets are falling from the sky **if and only if** it is raining.

